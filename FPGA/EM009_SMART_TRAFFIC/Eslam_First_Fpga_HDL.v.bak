// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.


// Generated by Quartus Prime Version 18.1 (Build Build 625 09/12/2018)
// Created on Mon Mar 14 22:55:30 2022



module Eslam_First_Fpga(

	//////////// ADC //////////
	output		          		ADC_CONVST,
	output		          		ADC_SCK,
	output		          		ADC_SDI,
	input 		          		ADC_SDO,

	//////////// ARDUINO //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,

	//////////// CLOCK //////////
	input 		          		FPGA_CLK1_50,
	input 		          		FPGA_CLK2_50,
	input 		          		FPGA_CLK3_50,

	//////////// HDMI //////////
	inout 		          		HDMI_I2C_SCL,
	inout 		          		HDMI_I2C_SDA,
	inout 		          		HDMI_I2S,
	inout 		          		HDMI_LRCLK,
	inout 		          		HDMI_MCLK,
	inout 		          		HDMI_SCLK,
	output		          		HDMI_TX_CLK,
	output		          		HDMI_TX_DE,
	output		    [23:0]		HDMI_TX_D,
	output		          		HDMI_TX_HS,
	input 		          		HDMI_TX_INT,
	output		          		HDMI_TX_VS,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [7:0]		LED,

	//////////// SW //////////
	input 		     [3:0]		SW,

	//////////// GPIO_0, GPIO connect to RFS - RF and Sensor //////////
	inout 		          		BT_KEY,
	input 		          		BT_UART_RX,
	output		          		BT_UART_TX,
	input 		          		LSENSOR_INT,
	inout 		          		LSENSOR_SCL,
	inout 		          		LSENSOR_SDA,
	inout 		          		MPU_AD0_SDO,
	output		          		MPU_CS_n,
	output		          		MPU_FSYNC,
	input 		          		MPU_INT,
	inout 		          		MPU_SCL_SCLK,
	inout 		          		MPU_SDA_SDI,
	input 		          		RH_TEMP_DRDY_n,
	inout 		          		RH_TEMP_I2C_SCL,
	inout 		          		RH_TEMP_I2C_SDA,
	inout 		     [7:0]		TMD_D,
	input 		          		UART2USB_CTS,
	output		          		UART2USB_RTS,
	input 		          		UART2USB_RX,
	output		          		UART2USB_TX,
	output		          		WIFI_EN,
	output		          		WIFI_RST_n,
	input 		          		WIFI_UART0_CTS,
	output		          		WIFI_UART0_RTS,
	input 		          		WIFI_UART0_RX,
	output		          		WIFI_UART0_TX,
	input 		          		WIFI_UART1_RX
);


Eslam_First_Fpga Eslam_First_Fpga_inst
(
	.FPGA_CLK1_50(FPGA_CLK1_50_sig) ,	// input  FPGA_CLK1_50_sig
	.KEY(KEY_sig) ,	// input [0:0] KEY_sig
	.LED(LED_sig) ,	// output [1:1] LED_sig
	.LED(LED_sig) ,	// output [2:2] LED_sig
	.Ldac(Ldac_sig) ,	// output  Ldac_sig
	.mosi(mosi_sig) ,	// output  mosi_sig
	.sck(sck_sig) ,	// output  sck_sig
	.cs(cs_sig) 	// output  cs_sig
);

//=======================================================
//  Structural coding
//=======================================================
assign MPU_CS_n = 1'b1;
assign MPU_FSYNC = 1'b0;
assign MPU_AD0_SDO = 1'b0;

nios_qsys u0 (
		.clk_clk                                    (FPGA_CLK1_50),                                    //                                 clk.clk
		.reset_reset_n                              (1'b1),                              //                               reset.reset_n

		.mpu_i2c_opencores_export_scl_pad_io        (MPU_SCL_SCLK),                 //                     mpu_i2c_export.scl_pad_io
		.mpu_i2c_opencores_export_sda_pad_io        (MPU_SDA_SDI),                 //                                   .sda_pad_io
		.mpu_int_external_connection_export         (MPU_INT),         //         mpu_int_external_connection.export

		.light_i2c_opencores_export_scl_pad_io      (LSENSOR_SCL),               //                   light_i2c_export.scl_pad_io
		.light_i2c_opencores_export_sda_pad_io      (LSENSOR_SDA),               //                                   .sda_pad_io
		.light_int_external_connection_export       (LSENSOR_INT),       //       light_int_external_connection.export

		.rh_temp_i2c_opencores_export_scl_pad_io    (RH_TEMP_I2C_SCL),             //                 rh_temp_i2c_export.scl_pad_io
		.rh_temp_i2c_opencores_export_sda_pad_io    (RH_TEMP_I2C_SDA),              //                                   .sda_pad_io
		.rh_temp_drdy_n_external_connection_export  (RH_TEMP_DRDY_n)   //  rh_temp_drdy_n_external_connection.export

						
	);
	
endmodule 